# Updated  to remove duplicates

name: Deploy PR Preview

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

concurrency: preview-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write
  deployments: write
  id-token: write
  checks: write

jobs:
  build_and_preview:
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    runs-on: ubuntu-latest
    environment: Staging

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Cache Firebase CLI
        uses: actions/cache@v4
        with:
          path: ~/.npm-global
          key: firebase-cli-${{ runner.os }}

      - name: Set environment variables
        run: |
          {
            echo "REACT_APP_SET_AUTH=firebase"
            echo "PREFERRED_REGION=${{ vars.PREFERRED_REGION }}"
            echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}"
            echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}"
            echo "NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID=${{ vars.NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID }}"
            echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}"
            echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}"
            echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}"
            echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ vars.NEXT_PUBLIC_FIREBASE_APP_ID }}"
            echo "NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${{ vars.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}"
            echo "NEXT_PUBLIC_API_ENDPOINT=${{ vars.NEXT_PUBLIC_API_ENDPOINT }}"
            echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}"
            echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ vars.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}"
            echo "NEXT_PUBLIC_RECAPTCHA_SITE_KEY=${{ vars.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}"
            echo "TWILIO_ACCOUNT_SID=${{ vars.TWILIO_ACCOUNT_SID }}"
            echo "TWILIO_API_KEY_SID=${{ vars.TWILIO_API_KEY_SID }}"
            echo "TWILIO_CONVERSATIONS_SERVICE_SID=${{ vars.TWILIO_CONVERSATIONS_SERVICE_SID }}"
            echo "TWILIO_CHAT_SERVICE_SID=${{ vars.TWILIO_CHAT_SERVICE_SID }}"
            echo "NEXT_PUBLIC_FCM_VAPID_KEY=${{ secrets.NEXT_PUBLIC_FCM_VAPID_KEY }}"
            echo "TWILIO_API_KEY_SECRET=${{ secrets.TWILIO_API_KEY_SECRET }}"
            echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}"
            echo "HMS_APP_ACCESS_KEY=${{ secrets.HMS_APP_ACCESS_KEY }}"
            echo "HMS_APP_SECRET=${{ secrets.HMS_APP_SECRET }}"
            echo "NEXT_PUBLIC_TOKEN_EXCHANGE_URL=${{ vars.NEXT_PUBLIC_TOKEN_EXCHANGE_URL }}"
            echo "NEXT_PUBLIC_DRIVE_URL=${{ vars.NEXT_PUBLIC_DRIVE_URL }}"
          } >> "$GITHUB_ENV"

      - name: Create .env file
        run: |
          env | grep -E '^(NEXT_PUBLIC|REACT_APP|PREFERRED_REGION|TWILIO|HMS|GOOGLE_MAPS|STRIPE)_' > .env
          bash ./set-env.sh

      - name: Install dependencies
        if: github.event.action != 'closed'
        run: npm ci

      - id: "auth"
        uses: google-github-actions/auth@v2.1.3
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GOOGLE_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create GitHub Deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Staging

      - name: Install Firebase CLI
        if: github.event.action != 'closed'
        run: |
          export PATH=~/.npm-global/bin:$PATH
          if ! command -v firebase &> /dev/null; then
            mkdir -p ~/.npm-global
            npm config set prefix '~/.npm-global'
            npm install -g firebase-tools
          fi

      - name: Deploy to Firebase Hosting
        if: github.event.action != 'closed'
        run: |
          export PATH=~/.npm-global/bin:$PATH
          export FIREBASE_FUNCTIONS_REGION=${{ vars.PREFERRED_REGION }}
          export FIREBASE_FUNCTIONS_DEFAULT_REGION=${{ vars.PREFERRED_REGION }}
          firebase use ${{ vars.GOOGLE_PROJECT_ID }}
          CHANNEL_ID="pr-${{ github.event.pull_request.number }}-${{ github.sha }}"
          CHANNEL_ID="${CHANNEL_ID:0:8}"
          echo "Deploying to channel: $CHANNEL_ID"

          firebase hosting:channel:deploy $CHANNEL_ID --expires 7d 2>&1 | grep -v "cleanup policy" || {
            echo "Deployment failed"
            exit 1
          }

          firebase hosting:channel:list | grep $CHANNEL_ID || {
            echo "Channel not found after deployment"
            exit 1
          }
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks
          GOOGLE_PROJECT_ID: ${{ vars.GOOGLE_PROJECT_ID }}
          NODE_ENV: staging

      - name: Mark Deployment Success
        if: github.event.action != 'closed'
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: success
          env: Staging
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://${{ vars.GOOGLE_PROJECT_ID }}--pr${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.ref }}.web.app

      - name: Add Preview URL to PR
        if: github.event.action != 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            const channelId = `pr-${context.payload.pull_request.number}-${context.sha.slice(0, 8)}`;
            const previewUrl = `https://${process.env.GOOGLE_PROJECT_ID}--${channelId}.web.app`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview deployed to: ${previewUrl}\n\nThis preview will expire in 7 days.`
            });
        env:
          GOOGLE_PROJECT_ID: ${{ vars.GOOGLE_PROJECT_ID }}

      - name: Cleanup on PR close
        if: github.event.action == 'closed'
        run: |
          export PATH=~/.npm-global/bin:$PATH
          if ! command -v firebase &> /dev/null; then
            mkdir -p ~/.npm-global
            npm config set prefix '~/.npm-global'
            npm install -g firebase-tools
          fi
          firebase use ${{ vars.GOOGLE_PROJECT_ID }}
          CHANNEL_ID="pr${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.ref }}"
          firebase hosting:channel:delete $CHANNEL_ID --force || true
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks
          GOOGLE_PROJECT_ID: ${{ vars.GOOGLE_PROJECT_ID }}
