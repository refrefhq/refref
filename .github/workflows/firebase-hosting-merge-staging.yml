# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy to Firebase Hosting on merge (Staging)
on:
  workflow_dispatch:
  push:
    branches:
      - develop

permissions:
  id-token: write
  contents: read
  checks: write

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: Staging
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Cache Firebase CLI
        uses: actions/cache@v4
        with:
          path: ~/.npm-global
          key: firebase-cli-${{ runner.os }}

      - name: Set environment variables
        run: |
          {
            echo "REACT_APP_SET_AUTH=firebase"
            echo "PREFERRED_REGION=${{ vars.PREFERRED_REGION }}"
            echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}"
            echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}"
            echo "NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID=${{ vars.NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID }}"
            echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}"
            echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}"
            echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}"
            echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ vars.NEXT_PUBLIC_FIREBASE_APP_ID }}"
            echo "NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${{ vars.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}"
            echo "NEXT_PUBLIC_API_ENDPOINT=${{ vars.NEXT_PUBLIC_API_ENDPOINT }}"
            echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}"
            echo "TWILIO_ACCOUNT_SID=${{ vars.TWILIO_ACCOUNT_SID }}"
            echo "TWILIO_API_KEY_SID=${{ vars.TWILIO_API_KEY_SID }}"
            echo "TWILIO_CONVERSATIONS_SERVICE_SID=${{ vars.TWILIO_CONVERSATIONS_SERVICE_SID }}"
            echo "TWILIO_CHAT_SERVICE_SID=${{ vars.TWILIO_CHAT_SERVICE_SID }}"
            echo "NEXT_PUBLIC_FCM_VAPID_KEY=${{ secrets.NEXT_PUBLIC_FCM_VAPID_KEY }}"
            echo "NEXT_PUBLIC_RECAPTCHA_SITE_KEY=${{ vars.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}"
            echo "TWILIO_API_KEY_SECRET=${{ secrets.TWILIO_API_KEY_SECRET }}"
            echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}"
            echo "HMS_APP_ACCESS_KEY=${{ secrets.HMS_APP_ACCESS_KEY }}"
            echo "HMS_APP_SECRET=${{ secrets.HMS_APP_SECRET }}"
            echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ vars.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}"
            echo "NEXT_PUBLIC_TOKEN_EXCHANGE_URL=${{ vars.NEXT_PUBLIC_TOKEN_EXCHANGE_URL }}"
            echo "NEXT_PUBLIC_DRIVE_URL=${{ vars.NEXT_PUBLIC_DRIVE_URL }}"
          } >> "$GITHUB_ENV"

      - name: Create .env file
        run: |
          # Create .env from environment variables
          env | grep -E '^(NEXT_PUBLIC|REACT_APP|PREFERRED_REGION|TWILIO|HMS|GOOGLE_MAPS|STRIPE)_' > .env

          # Debug initial state
          echo "Variables in .env: $(wc -l < .env)"

          # Add version
          bash ./set-env.sh

          # Final verification
          echo "Final variables in .env: $(wc -l < .env)"
          echo "Critical vars check:"
          echo "API_KEY exists: $(grep -q 'NEXT_PUBLIC_FIREBASE_API_KEY' .env && echo 'Yes' || echo 'No')"
          echo "AUTH_DOMAIN exists: $(grep -q 'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN' .env && echo 'Yes' || echo 'No')"
          echo "APP_VERSION exists: $(grep -q 'NEXT_PUBLIC_APP_VERSION' .env && echo 'Yes' || echo 'No')"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - id: "auth"
        uses: google-github-actions/auth@v2.1.3
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GOOGLE_SERVICE_ACCOUNT }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Install Firebase CLI
        run: |
          export PATH=~/.npm-global/bin:$PATH
          if ! command -v firebase &> /dev/null; then
            mkdir -p ~/.npm-global
            npm config set prefix '~/.npm-global'
            npm install -g firebase-tools
          fi

      - name: Deploy to Firebase Hosting (Staging)
        run: |
          export PATH=~/.npm-global/bin:$PATH
          firebase use ${{ vars.GOOGLE_PROJECT_ID }}
          firebase --non-interactive deploy --only hosting --force
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

      - name: Debug environment (no secrets)
        run: |
          echo "Environment: Staging"
          echo "Using project: ${{ vars.GOOGLE_PROJECT_ID }}"
          echo "GTM ID is set: ${{ vars.NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID != '' }}"
